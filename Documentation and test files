Documentation for Online Library Management System (C++)
1. Introduction
The Online Library Management System is a simple C++ program that allows users to manage a collection of books. It enables users to:

Add books to the library
Display available books
Search for books by title
This program is implemented using C++ classes and vectors for data storage, without using a database.

2. Features
✅ Add a new book (Stores title, author, and ID)
✅ Display all available books
✅ Search for a book by title
✅ Menu-driven interface for easy interaction

3. File Structure
bash
Copy
Edit
/LibraryManagementSystem
│── main.cpp          # Main program file
│── library.h         # Header file (Library class)
│── test_library.cpp  # Test file for unit testing
│── README.md         # Documentation file
4. Code Breakdown
4.1 Structure of a Book
Each book has three attributes:

cpp
Copy
Edit
struct Book {
    string title;
    string author;
    int id;
};
4.2 Library Class
Handles book-related operations:

cpp
Copy
Edit
class Library {
private:
    vector<Book> books;
    int bookCount;

public:
    Library() : bookCount(0) {}

    void addBook();        // Add a new book
    void displayBooks();   // Display all books
    void searchBook();     // Search for a book
};
4.3 Functionality
✔ Adding a Book
Prompts the user to enter book details and stores them:

cpp
Copy
Edit
void Library::addBook() {
    Book newBook;
    cout << "Enter Book Title: ";
    cin.ignore();
    getline(cin, newBook.title);
    cout << "Enter Author Name: ";
    getline(cin, newBook.author);
    newBook.id = ++bookCount;
    books.push_back(newBook);
    cout << "Book added successfully! Book ID: " << newBook.id << endl;
}
✔ Displaying Books
Loops through the vector and prints all books:

cpp
Copy
Edit
void Library::displayBooks() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }
    for (const auto& book : books) {
        cout << "ID: " << book.id << ", Title: " << book.title 
             << ", Author: " << book.author << endl;
    }
}
✔ Searching for a Book
Compares input with stored book titles:

cpp
Copy
Edit
void Library::searchBook() {
    string searchTitle;
    cout << "Enter the book title to search: ";
    cin.ignore();
    getline(cin, searchTitle);

    for (const auto& book : books) {
        if (book.title == searchTitle) {
            cout << "Book Found! ID: " << book.id << ", Title: " << book.title 
                 << ", Author: " << book.author << endl;
            return;
        }
    }
    cout << "Book not found.\n";
}
5. Test Cases (test_library.cpp)
Test	Expected Result
Add a book	Book count increases
Search book (exists)	Book found message
Search book (not exists)	Book not found
Display books	Correct list appears
Example test function:

cpp
Copy
Edit
void testLibrary() {
    Library lib;
    lib.addBookManual("C++", "Bjarne Stroustrup");
    assert(lib.getBookCount() == 1);
    assert(lib.searchBookManual("C++") == true);
    assert(lib.searchBookManual("Python") == false);
    cout << "All tests passed!\n";
}
6. How to Compile and Run
6.1 Compile Main Program
sh
Copy
Edit
g++ -o library main.cpp -std=c++11
./library
6.2 Compile and Run Tests
sh
Copy
Edit
g++ -o test_library test_library.cpp -std=c++11
./test_library
7. Future Enhancements
Implement a database (MySQL, SQLite) for permanent storage
Add user authentication (Admin, Student roles)
Implement book borrowing and return functionalities
Build a Graphical User Interface (GUI)
8. Conclusion
This project provides a simple Library Management System in C++ using OOP concepts and vectors. It is expandable and can be modified for more complex features.







