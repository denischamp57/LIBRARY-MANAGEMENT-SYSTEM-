
Documentation for LMS(LIBRARY MANAGEMENT SYSTEM)

1.PRELIMINARY
The  Library Management System is a simple C++ program that allows users to manage a collection of books. It enables users to:

Add books to the library
Display available books
Search for books by title
This program is implemented using C++ classes and vectors for data storage, without using a database.


2. source Code analysis 

Structure of a Book

every book has three features:
struct Book {
    string title;
    string writer;
    int bookNo;
};

2.1 Library Class

manages book-related activities:
class Library {
private:
    vector<Book> books;
    int Noofbooks;

public:
    Library() : Noofbooks(0) {}

    void addBook();        // Add a new book
    void displayBooks();   // Display all books
    void booksearch();     // Search for a book
};
2.2 Functionality
Adding a Book
asks the user to enter book details and stores them:

void Library::addBook() {
    Book newBook;
    cout << "Enter Book Title: ";
    cin.ignore();
    getline(cin, newBook.title);
    cout << "Enter writer Name: ";
    getline(cin, newBook.writer);
    newBook.bookNo = ++Noofbooks;
    books.push_back(newBook);
    cout << "Book added successfully! Book bookNo: " << newBook.bookNo << endl;
}
 Displaying Books
Loops through the vector and prints all books:

void Library::displayBooks() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }
    for (const auto& book : books) {
        cout << "bookNo: " << book.bookNo << ", Title: " << book.title 
             << ", writer: " << book.writer << endl;
    }
}
 Searching for a Book
Compares input with stored book titles:

void Library::booksearch() {
    string searchTitle;
    cout << "Enter the book title to search: ";
    cin.ignore();
    getline(cin, searchTitle);

    for (const auto& book : books) {
        if (book.title == searchTitle) {
            cout << "Book Found! bookNo: " << book.bookNo << ", Title: " << book.title 
                 << ", writer: " << book.writer << endl;
            return;
        }
    }
    cout << "Book not found.\n";
}

3. Test Cases

Test	=Expected Result
Add a book=	Noofbooks increases
Search book (exists)	Book found message
Search book (not exists)	Book not found
Display books	Correct list appears

4. Future maintenance and improvements 
Incorporate a database (MySQL, SQLite) for permanent storage
Add user authentication (Admin, Student roles)
design a Graphical User Interface.
5. in  Conclusion
This project shows a Library Management System in C++ using OOP concepts.
